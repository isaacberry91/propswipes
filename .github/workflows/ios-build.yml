name: Build and Deploy iOS App

# Auto-signing iOS build
 
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install
      
    - name: Build web app
      run: npm run build
      
    - name: Setup Capacitor and sync
      run: |
        npm install -g @capacitor/cli
        npx cap add ios
        npx cap sync ios
        
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Setup certificates and provisioning profile
      env:
        API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
        CERTIFICATE_CONTENT: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE }}
        CERTIFICATE_PASSWORD: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_PASSWORD }}
        PROVISIONING_PROFILE_CONTENT: ${{ secrets.PROVISIONING_PROFILE }}
        API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
      run: |
        # Debug: Check if secrets are available
        echo "API_KEY_ID: $API_KEY_ID"
        echo "API_KEY_CONTENT length: ${#API_KEY_CONTENT}"
        echo "CERTIFICATE_CONTENT length: ${#CERTIFICATE_CONTENT}"
        echo "CERTIFICATE_PASSWORD length: ${#CERTIFICATE_PASSWORD}"
        echo "PROVISIONING_PROFILE_CONTENT length: ${#PROVISIONING_PROFILE_CONTENT}"
        
        # Create API key
        mkdir -p ~/private_keys
        if [ -n "$API_KEY_CONTENT" ]; then
          echo "$API_KEY_CONTENT" | base64 --decode > ~/private_keys/AuthKey_$API_KEY_ID.p8
          echo "API key created successfully"
        else
          echo "ERROR: API_KEY_CONTENT is empty"
          exit 1
        fi
        
        # Create keychain
        security create-keychain -p "build" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "build" build.keychain
        security set-keychain-settings -lut 21600 build.keychain
        
        # Import distribution certificate with specific identity
        if [ -n "$CERTIFICATE_CONTENT" ]; then
          echo "$CERTIFICATE_CONTENT" | base64 --decode > certificate.p12
          security import certificate.p12 -P "$CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k build.keychain -T /usr/bin/codesign
          echo "Certificate imported successfully"
        else
          echo "ERROR: CERTIFICATE_CONTENT is empty"
          exit 1
        fi
        
        # Allow codesign to use the keychain
        security set-key-partition-list -S apple-tool:,apple: -s -k "build" build.keychain
        
        # Install provisioning profile  
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        if [ -n "$PROVISIONING_PROFILE_CONTENT" ]; then
          echo "$PROVISIONING_PROFILE_CONTENT" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
          echo "Provisioning profile installed successfully"
        else
          echo "ERROR: PROVISIONING_PROFILE_CONTENT is empty"
          exit 1
        fi
        
        # List available identities and profiles for debugging
        security find-identity -v -p codesigning build.keychain
        ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
        
    - name: Create ExportOptions.plist
      run: |
        cat > ios/App/ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store-connect</string>
            <key>teamID</key>
            <string>${{ secrets.APP_STORE_TEAM_ID }}</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
                <key>com.propswipes.app</key>
                <string>PropSwipes App Store Profile</string>
            </dict>
            <key>signingCertificate</key>
            <string>iPhone Distribution</string>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
            <key>manageAppVersionAndBuildNumber</key>
            <false/>
            <key>stripSwiftSymbols</key>
            <true/>
        </dict>
        </plist>
        EOF
        
    - name: Configure iOS project
      run: |
        chmod +x scripts/configure-ios.sh
        DEVELOPMENT_TEAM="${{ secrets.APP_STORE_TEAM_ID }}" ./scripts/configure-ios.sh
        
    - name: Build iOS app
      run: |
        cd ios/App
        
        # Build with the configured manual signing
        xcodebuild -workspace App.xcworkspace \
          -scheme App \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath App.xcarchive \
          archive
        
    - name: Export IPA
      run: |
        cd ios/App
        xcodebuild -exportArchive -archivePath App.xcarchive -exportPath . -exportOptionsPlist ExportOptions.plist \
          -authenticationKeyPath ~/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_KEY_ID }}.p8 \
          -authenticationKeyID ${{ secrets.APP_STORE_CONNECT_KEY_ID }} \
          -authenticationKeyIssuerID ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        
    - name: Upload to App Store
      run: |
        xcrun notarytool submit ios/App/App.ipa --key ~/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_KEY_ID }}.p8 --key-id ${{ secrets.APP_STORE_CONNECT_KEY_ID }} --issuer ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }} --wait
