// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://jkctleefoomwpaglrvie.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImprY3RsZWVmb29td3BhZ2xydmllIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM0Nzg5NjAsImV4cCI6MjA2OTA1NDk2MH0.QGzHZYiP-m_ayMQ5RjYBLbSRd2J400E4c-UjHNvhmHg";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    debug: true,
  },
  global: {
    headers: {
      'x-client-info': 'propswipes-ios-debug'
    },
    fetch: (url: RequestInfo | URL, options: RequestInit = {}) => {
      console.log('üîê PropSwipes Supabase Client: Making request to:', url);
      console.log('üîê PropSwipes Supabase Client: Request options:', {
        method: options.method || 'GET',
        headers: options.headers ? 'present' : 'none',
        body: options.body ? 'present' : 'none',
        credentials: options.credentials
      });
      
      const startTime = Date.now();
      
      return fetch(url, options).then(response => {
        const duration = Date.now() - startTime;
        console.log('üîê PropSwipes Supabase Client: Response received:', {
          url: url.toString(),
          status: response.status,
          statusText: response.statusText,
          duration: `${duration}ms`,
          headers: Object.fromEntries(response.headers.entries())
        });
        return response;
      }).catch(error => {
        const duration = Date.now() - startTime;
        console.error('üîê PropSwipes Supabase Client: Request failed:', {
          url: url.toString(),
          error: error.message,
          name: error.name,
          duration: `${duration}ms`,
          stack: error.stack
        });
        throw error;
      });
    }
  }
});

// Add global event listeners for debugging
supabase.auth.onAuthStateChange((event, session) => {
  console.log('üîê PropSwipes Supabase Client: Global auth state change', {
    event,
    timestamp: new Date().toISOString(),
    hasSession: !!session,
    userId: session?.user?.id,
    userEmail: session?.user?.email
  });
});

console.log('üîê PropSwipes Supabase Client: Initialized with URL:', SUPABASE_URL);